@using BsBios.Portal.Application.Queries.Contracts
@using BsBios.Portal.Common
@using BsBios.Portal.UI.Helpers
@using BsBios.Portal.ViewModel
@model RelatorioDeProcessoDeCotacaoDeFreteFiltroVm

@{
    var listaDeStatus = ((IList<StatusProcessoCotacaoVm>)ViewBag.StatusProcessoCotacao).Select(x => new SelectListItem { Value = Convert.ToString(x.Codigo), Text = x.Descricao });
    var listaDeClassificacao = ((IList<ChaveValorVm>)ViewBag.EscolhaSimples).Select(x => new SelectListItem
    {
        Value = Convert.ToString(x.Codigo), Text = x.Descricao, Selected = (x.Codigo == (int) Enumeradores.EscolhaSimples.Todos)
    });

}

@Html.LinhaComDuasColunas(new ColunaComDropDown<RelatorioDeProcessoDeCotacaoDeFreteFiltroVm, int?>(x => x.Status, listaDeStatus, "Status"),
                new ColunaComDropDown<RelatorioDeProcessoDeCotacaoDeFreteFiltroVm, int>(x => x.Classificacao, listaDeClassificacao,"Classificacao","",null) )

@Html.LinhaComDuasColunas(new ColunaComTextBox<RelatorioDeProcessoDeCotacaoDeFreteFiltroVm, string>(x => x.DataDeValidadeInicial,"campopequeno campoDatePicker maskdata"),
    new ColunaComTextBox<RelatorioDeProcessoDeCotacaoDeFreteFiltroVm, string>(x => x.DataDeValidadeFinal, "campopequeno campoDatePicker maskdata"))
<div class="linha">
    <div class="coluna">
        @Html.LabelFor(x => x.CodigoDoMaterial)
        @Html.TextBoxFor(x => x.CodigoDoMaterial, new { @readonly = true, @class = "campogrande campoDesabilitado" })
        <input type="button" id="btnSelecionarProduto" class="button_visualize" />
    </div>
    <div class="coluna">
        @Html.LabelFor(x => x.DescricaoDoMaterial)
        @Html.TextBoxFor(x => x.DescricaoDoMaterial, new {@class = "campogrande" })
    </div>
</div>
<div class="linha">
    <div class="coluna">
        @Html.LabelFor(x => x.CodigoDoFornecedorDaMercadoria)
        @Html.TextBoxFor(x => x.CodigoDoFornecedorDaMercadoria, new { @readonly = true, @class = "campogrande campoDesabilitado" })
        <input type="button" id="btnSelecionarFornecedor" class="button_visualize" />
    </div>
    <div class="coluna">
        @Html.LabelFor(x => x.NomeDoFornecedorDaMercadoria)
        @Html.TextBoxFor(x => x.NomeDoFornecedorDaMercadoria, new {@class = "campogrande" })
    </div>
</div>
<div class="linha">
    <div class="coluna">
        @Html.LabelFor(x => x.CodigoDaTransportadora)
        @Html.TextBoxFor(x => x.CodigoDaTransportadora, new { @readonly = true, @class = "campogrande campoDesabilitado" })
        <input type="button" id="btnSelecionarTransportadora" class="button_visualize" />
    </div>
    <div class="coluna">
        @Html.LabelFor(x => x.NomeDaTransportadora)
        @Html.TextBoxFor(x => x.NomeDaTransportadora, new {@class = "campogrande" })
    </div>
</div>

<div class="linha">
    <div class="coluna">
        @Html.HiddenFor(x => x.CodigoDoItinerario)
        @Html.LabelFor(x => x.DescricaoDoItinerario)
        @Html.TextBoxFor(x => x.DescricaoDoItinerario, new { @readonly = true, @class = "campogrande campoDesabilitado" })
        <input type="button" id="btnSelecionarItinerario" class="button_visualize" />
    </div>
    <div class="coluna">
        @{
            var listaDeSelecaoDeFornecedores = ((IList<SelecaoDeFornecedoresVm>)ViewBag.SelecaoDeFornecedores).Select(x => new SelectListItem { 
                Value = Convert.ToString(x.Codigo), Text = x.Descricao, Selected = (x.Codigo == (int) Enumeradores.SelecaoDeFornecedores.Todos)});            
        }
        @Html.LabelFor(x => x.SelecaoDeFornecedores)
        @Html.DropDownList("SelecaoDeFornecedores", listaDeSelecaoDeFornecedores)
    </div>
</div>
@Html.LinhaComDuasColunas(new ColunaComDropDown<RelatorioDeProcessoDeCotacaoDeFreteFiltroVm, string>(x => x.CodigoDoTerminal,
    ((List<TerminalCadastroVm>)ViewBag.Terminais)
        .Select(x => new SelectListItem() { Text = x.Nome, Value = Convert.ToString(x.Codigo)}),
        "CodigoDoTerminal"), new ColunaVazia<RelatorioDeProcessoDeCotacaoDeFreteFiltroVm, object>(x => null))



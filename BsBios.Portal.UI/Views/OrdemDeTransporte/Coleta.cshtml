@using BsBios.Portal.UI.Helpers
@using BsBios.Portal.ViewModel
@model ColetaVm
@{
    Layout = null;
}
<div class="divFiltros">
    <fieldset >
        <legend>Dados da Coleta</legend>
        <form id="formAgendamento"> 
            @Html.HiddenFor(x => x.Id)
            @Html.LinhaComDuasColunas(new ColunaComTextBox<ColetaVm, string>(x => x.Placa, "campopequeno maskplaca"),
            new ColunaComTextBox<ColetaVm, string>(x => x.Motorista,"campogrande"))
            
            @Html.LinhaComUmaColuna(new ColunaComTextBox<ColetaVm, string>(x => x.DataDePrevisaoDeChegada, "campopequeno campoDatePicker maskdata"))
            @Html.LinhaComDuasColunas(new ColunaComTextBox<ColetaVm, decimal>(x => x.Peso, "campopequeno maskquantidade campoDesabilitado"),
                new ColunaComTextBox<ColetaVm, string>(x => x.UnidadeDeMedida, "campogrande campoDesabilitado"))
            
            @Html.LinhaComDuasColunas(new ColunaComTextBox<ColetaVm, decimal>(x => x.PrecoUnitario, "campopequeno maskquantidade campoDesabilitado"),
            new ColunaComTextBox<ColetaVm, decimal>(x => x.ValorDoFrete, "campopequeno maskquantidade campoDesabilitado"))
        </form>
    </fieldset>
    <fieldset id="fieldSetNotaFiscal">
        <legend>Nota Fiscal</legend>
        <form id="formNotaFiscal">
            @Html.LinhaComDuasColunas(new ColunaComTextBox<ColetaVm, string>(x => x.NotaFiscal.Numero, "campopequeno masknumeronf"),
                                    new ColunaComTextBox<ColetaVm, string>(x => x.NotaFiscal.Serie, "campopequeno maskserienf"))

            @Html.LinhaComUmaColuna(new ColunaComTextBox<ColetaVm, string>(x => x.NotaFiscal.DataDeEmissao, Model.PermiteEditar ? "campopequeno campoDatePicker maskdata" : ""))
            
            @Html.LinhaComDuasColunas(new ColunaComTextBox<ColetaVm, decimal>(x => x.NotaFiscal.Peso, "campopequeno maskmoeda"),
                     new ColunaComTextBox<ColetaVm, decimal>(x => x.NotaFiscal.Valor, "campopequeno maskmoeda"))
            

            @if (Model.PermiteEditar)
            {
                <div class="divBotao">
                    <input type="button" id="btnSalvarNotaFiscal" class="blue" value="Adicionar"/>
                    <input type="button" id="btnCancelarEdicao" value="Cancelar" class="blue" />
                </div>
            }

        </form>
    </fieldset>
    <fieldset>
        <legend>Notas Fiscais adicionadas</legend>
        <div id="divGridNotasFiscaisAdicionadas" class="divGrid" style="width: 780px"></div>
    </fieldset>
    <div id="divErro" class="message-error"></div>
</div>

<script type="text/javascript" src="@Url.Content("~/Scripts/AgendamentoDeCarga/GridNotasFiscais.js")"></script>
<script type="text/javascript">

    $(function () {
        
        inicializaCamposDatePicker();
        function limparCamposDaNota() {
            $('#fieldSetNotaFiscal').find('input:not([type=button])').val('');
        }

        $('#btnCancelarEdicao').hide();
        var permiteEditar = '@Model.PermiteEditar'.boolean();
        if (permiteEditar || '@Model.PermiteRealizar'.boolean()) {
            $('.ui-dialog-buttonpane').show();
        } else {
            $('.ui-dialog-buttonpane').hide();
        }

        if (!permiteEditar) {
            $('form').find('input')
                .attr('readonly', true)
                .addClass('campoDesabilitado');
        } else {
            aplicaMascaraNumeroNf();
            aplicaMascaraSerieNf();
            aplicaMascaraPlaca();
            aplicaMascaraData();
            aplicaMascaraQuantidade();
            aplicaMascaraMoeda();
        }

        var funcaoAposSalvarNota = function() {
            var valorUnitario = Globalize.parseFloat($("#PrecoUnitario").val());
            var pesoTotal = 0;
            var notasFiscais = GridNotasFiscais.NotasFiscais();
            $.each(notasFiscais, function(indice, notaFiscal) {
                pesoTotal += notaFiscal.Peso;
            });
            
            var valorDoFrete = pesoTotal * valorUnitario;

            $("#Peso").val(Globalize.format(pesoTotal, 'n3'));
            $('#ValorDoFrete').val(Globalize.format(valorDoFrete, 'n2'));
        };

        GridNotasFiscais.ConfigurarGrid({
            PermiteEditar: permiteEditar,
            exibirContratanteEEmitente: false,
            funcaoParaExecutarAposSalvarNota: funcaoAposSalvarNota
        });
        $('#btnSalvarNotaFiscal').click(function() {
            var form = $('#formNotaFiscal');
            if (!$(form).validate().form()) {
                return;
            }

            var notaFiscal = {
                Numero: $('#NotaFiscal_Numero').val(),
                Serie: $('#NotaFiscal_Serie').val(),
                DataDeEmissao: $('#NotaFiscal_DataDeEmissao').val(),
                Valor: Globalize.parseFloat($('#NotaFiscal_Valor').val()),
                Peso: Globalize.parseFloat($('#NotaFiscal_Peso').val())
            };

            try {
                GridNotasFiscais.SalvarNotaFiscal(notaFiscal);
                limparCamposDaNota();
                $('#btnSalvarNotaFiscal').val('Adicionar');
                $('#btnCancelarEdicao').hide();
            } catch(err) {
                Mensagem.ExibirMensagemDeErro(err);
            }
        });

        if (!permiteEditar) {
            GridNotasFiscais.CarregarCamposParaPrimeiraNota();
        }

        $('#btnCancelarEdicao').click(function() {
            $('#btnSalvarNotaFiscal').val('Adicionar');
            limparCamposDaNota();
            $(this).hide();
        });

    });
</script>



@using BsBios.Portal.Common
@using BsBios.Portal.UI.Helpers
@using BsBios.Portal.ViewModel
@model ProcessoCotacaoFreteCadastroVm

@{
    ViewBag.TituloDaPagina = "Processo de Cotação de Frete";
}
<link href="@Url.Content("~/Content/kendo/2012.3.1114/kendo.common.min.css")" rel="stylesheet" />
<link href="@Url.Content("~/Content/kendo/2012.3.1114/kendo.default.min.css")" rel="stylesheet" />
<link href="@Url.Content("~/Content/jquery.loadmask.css")" rel="stylesheet" />
<div class="paginaCadastro">
    @using (Html.BeginForm()) {

        <fieldset>
            <legend>Processo de Cotação</legend>

            @Html.HiddenFor(model => model.Id)
            
            <div class="coluna">
                @Html.Label("Status:",new{@class="labelNaLinha"})
                <span id="spanStatus">@(Model != null ? Model.DescricaoStatus : "Não Iniciado")</span> 
            </div>
            
            <div class="linha">
                @Html.HiddenFor(x => x.CodigoMaterial)
                @Html.LabelFor(x => x.DescricaoMaterial)
                @Html.TextBoxFor(x => x.DescricaoMaterial,new{@readonly=true,@class="campoextragrande campoDesabilitado"})
                <input type="button" id="btnSelecionarProduto" class="button_visualize" />        
                <p class="mensagemErro">
                    @Html.ValidationMessageFor(x => x.DescricaoMaterial)    
                </p>
            </div>
            @{ var comboUnidadeDeMedida = new ColunaComDropDown<ProcessoCotacaoFreteCadastroVm, string>(x => x.CodigoUnidadeMedida, 
                ((List<UnidadeDeMedidaSelecaoVm>) ViewBag.UnidadesDeMedida)
                .Select(x => new SelectListItem() {Text = x.Descricao, Value = Convert.ToString(x.CodigoInterno), Selected = Model != null && x.CodigoInterno == Model.CodigoUnidadeMedida}),
                "CodigoUnidadeMedida");

               var quantidadeMaterial = new ColunaComTextBox<ProcessoCotacaoFreteCadastroVm, decimal>(x => x.QuantidadeMaterial, "maskquantidade");
            }
            
            @Html.LinhaComDuasColunas(quantidadeMaterial,comboUnidadeDeMedida)
            
            @{ 
                var dataLimiteDeRetorno = new ColunaComTextBox<ProcessoCotacaoFreteCadastroVm, string>(x => x.DataLimiteRetorno, "campoDatePicker maskdata");

                var comboDeTerminal = new ColunaComDropDown<ProcessoCotacaoFreteCadastroVm, string>(x => x.CodigoDoTerminal, 
                ((List<TerminalCadastroVm>) ViewBag.Terminais)
                .Select(x => new SelectListItem() {Text = x.Nome, Value = Convert.ToString(x.Codigo), Selected = Model != null && x.Codigo == Model.CodigoDoTerminal}),
                "CodigoDoTerminal");

            }

            @Html.LinhaComDuasColunas(dataLimiteDeRetorno, comboDeTerminal)
            
            @Html.LinhaComDuasColunas(new ColunaComTextBox<ProcessoCotacaoFreteCadastroVm, string>(x => x.DataValidadeCotacaoInicial, "campoDatePicker maskdata"),
            new ColunaComTextBox<ProcessoCotacaoFreteCadastroVm, string>(x => x.DataValidadeCotacaoFinal, "campoDatePicker maskdata"))        

            <div class="linha">
                @Html.HiddenFor(x => x.CodigoItinerario)
                @Html.LabelFor(x => x.DescricaoItinerario)
                @Html.TextBoxFor(x => x.DescricaoItinerario,new{@readonly=true,@class="campoextragrande campoDesabilitado"})
                <input type="button"  id="btnSelecionarItinerario" class="button_visualize" />        
                <p class="mensagemErro">
                    @Html.ValidationMessageFor(x => x.DescricaoItinerario)
                </p>
            </div>

            @Html.LinhaComDuasColunas(new ColunaComTextBox<ProcessoCotacaoFreteCadastroVm, string>(x => x.NumeroDoContrato,"campomedio masknumerocontrato"), 
            new ColunaComTextArea<ProcessoCotacaoFreteCadastroVm, string>(x => x.Requisitos))
            
            @Html.LinhaComDuasColunas(new ColunaComCheckBox<ProcessoCotacaoFreteCadastroVm, bool>(x => x.Classificacao),
             new ColunaComTextBox<ProcessoCotacaoFreteCadastroVm, decimal>(x => x.Cadencia, "campopequeno maskquantidade"))
            
            <div class="coluna">
                @Html.HiddenFor(x => x.CodigoDoFornecedorDaMercadoria)
                @Html.LabelFor(x => x.FornecedorDaMercadoria)
                @Html.TextBoxFor(x => x.FornecedorDaMercadoria, new { @readonly = true, @class = "campogrande campoDesabilitado" })
                <input type="button" id="btnSelecionarFornecedor" class="button_visualize" />
                @Html.ValidationMessageFor(x => x.FornecedorDaMercadoria)
            </div>
            
            <div class="coluna">
                @Html.HiddenFor(x => x.CodigoDoDeposito)
                @Html.LabelFor(x => x.Deposito)
                @Html.TextBoxFor(x => x.Deposito, new { @readonly = true, @class = "campogrande campoDesabilitado" })
                <input type="button" id="btnSelecionarDeposito" class="button_visualize" />
            </div>
            
            <div class="linha">
                <div class="coluna">
                    @Html.HiddenFor(x => x.CodigoDoMunicipioDeOrigem)
                    @Html.LabelFor(x => x.NomeDoMunicipioDeOrigem)
                    @Html.TextBoxFor(x => x.NomeDoMunicipioDeOrigem, new {@class = "campogrande" })
                    @Html.ValidationMessageFor(x => x.NomeDoMunicipioDeOrigem)
                </div>
                <div class="coluna">
                    @Html.HiddenFor(x => x.CodigoDoMunicipioDeDestino)
                    @Html.LabelFor(x => x.NomeDoMunicipioDeDestino)
                    @Html.TextBoxFor(x => x.NomeDoMunicipioDeDestino, new { @class = "campogrande" })
                    @Html.ValidationMessageFor(x => x.NomeDoMunicipioDeDestino)
                </div>

            </div>

            @Html.ValidationSummary(true)
        <div class="error"></div>
        <div class="divBotao">
            <input type="button" id="btnSalvar" value="Salvar" class="blue" />
        </div>
        </fieldset>
    }
    @Html.Partial("_ProcessoDeCotacaoOperacoes", new ViewDataDictionary() 
        {   new KeyValuePair<string, object>("idProcessoCotacao", Model != null ? Model.Id : 0),
            new KeyValuePair<string, object>("TipoDeCotacao", Enumeradores.TipoDeCotacao.Frete)
        })
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script src="@Url.Content("~/Scripts/kendo/2012.3.1114/kendo.web.min.js")"></script>
    <script src="@Url.Content("~/Scripts/kendo/2012.3.1114/kendo.grid.min.js")"></script>
    <script src="@Url.Content("~/Scripts/jquery.maskedinput.js")"></script>
    <script src="@Url.Content("~/Scripts/jquery.meio.mask.js")"></script>
    <script src="@Url.Content("~/Scripts/jquery.loadmask.js")"></script>
    <script src="@Url.Content("~/Scripts/ProcessoDeCotacao/CotacaoDoFornecedorResumido.js")"></script>
    <script src="@Url.Content("~/Scripts/ProcessoDeCotacao/ProcessoDeCotacaoOperacoes.js")"></script>
    <script src="@Url.Content("~/Scripts/Shared/SelecionarFornecedor.js")"></script>
    <script src="@Url.Content("~/Scripts/Shared/SelecionarProduto.js")"></script>
    <script src="@Url.Content("~/Scripts/Shared/SelecionarItinerario.js")"></script>
    <script src="@Url.Content("~/Scripts/Shared/autoCompleteDeMunicipio.js")"></script>

    <script type="text/javascript">
        $(function () {
            var idProcessoCotacao = '@(Model != null ? Model.Id : 0)';
            GridCotacaoResumida.Configurar(idProcessoCotacao);
            ProcessoDeCotacaoOperacoes.Configurar('@((int) Enumeradores.TipoDeCotacao.Frete)');

            aplicaMascaraData();
            aplicaMascaraQuantidade();
            aplicaMascaraNumeroContrato();
            aplicaMascaraInteiro();

            var selecionarFornecedorDaMercadoria = new SelecionarFornecedor();
            selecionarFornecedorDaMercadoria.configurar("#CodigoDoFornecedorDaMercadoria", "#FornecedorDaMercadoria","divSelecionarFornecedor", "#btnSelecionarFornecedor");

            var selecionarDeposito = new SelecionarFornecedor();
            selecionarDeposito.configurar("#CodigoDoDeposito", "#Deposito", "divSelecionarDeposito", "#btnSelecionarDeposito");

            var selecionarProduto = new SelecionarProduto();
            selecionarProduto.configurar('#CodigoMaterial', '#DescricaoMaterial', 'divSelecionarProduto', '#btnSelecionarProduto');

            var selecionarItinerario = new SelecionarItinerario();
            selecionarItinerario.configurar('#CodigoItinerario', "#DescricaoItinerario", 'divSelecionarItinerario', '#btnSelecionarItinerario');

            criarAutoCompleteDeMunicipio('#CodigoDoMunicipioDeOrigem', '#NomeDoMunicipioDeOrigem');
            criarAutoCompleteDeMunicipio('#CodigoDoMunicipioDeDestino', '#NomeDoMunicipioDeDestino');
            
            $('#btnSalvar').click(function() {
                $('.error').empty();
                var form = $('form');
                if (!$(form).validate().form()) {
                    return;
                }

                var formData = $(form).serialize();
                $.post('@Url.Action("Salvar","ProcessoDeCotacaoDeFreteService" )', formData,
                    function(data) {
                        if (data.Sucesso) {
                            location.href = '@Url.Action("Index","ProcessoDeCotacaoDeFrete")';
                        } else {
                            Mensagem.ExibirMensagemDeErro(data.Mensagem);
                        }
                    });
            });
        })
    </script>
}

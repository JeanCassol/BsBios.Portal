@using BsBios.Portal.UI.Helpers
@using BsBios.Portal.ViewModel
@model CotacaoCadastroVm

@{
    ViewBag.Title = "Cotação";
}
<div class="paginaCadastro">
    @using (Html.BeginForm("Salvar","CotacaoAtualizar"))
    {
        @Html.HiddenFor(model => model.IdProcessoCotacao)
        @Html.HiddenFor(model => model.CodigoFornecedor)
        
        <fieldset>
            <legend>Processo de Cotação</legend>
            @Html.LinhaComDuasColunas(new ColunaComLabel<CotacaoCadastroVm, string>(x => x.Status),
            new ColunaComLabel<CotacaoCadastroVm, string>(x => x.DataLimiteDeRetorno))
            @Html.LinhaComUmaColuna(new ColunaComLabel<CotacaoCadastroVm, string>(x => x.Material))
            @Html.LinhaComDuasColunas(new ColunaComLabel<CotacaoCadastroVm, decimal>(x => x.Quantidade),
            new ColunaComLabel<CotacaoCadastroVm, string>(x => x.UnidadeDeMedida))
            @Html.LinhaComUmaColuna(new ColunaComLabel<CotacaoCadastroVm, string>(x => x.DescricaoDoProcessoDeCotacao))
        </fieldset>
        <fieldset id="fieldSetImpostos">
            <legend>Impostos</legend>
            <span class="error">É indispensável que as alíquotas e os valores do impostos sejam informados corretamente</span>
            @Html.LinhaComDuasColunas(new ColunaComEditor<CotacaoCadastroVm, decimal?>(x => x.IcmsAliquota), 
            new ColunaComEditor<CotacaoCadastroVm, decimal?>(x => x.IcmsValor))
            @Html.LinhaComDuasColunas(new ColunaComEditor<CotacaoCadastroVm, decimal?>(x => x.IcmsStAliquota), 
            new ColunaComEditor<CotacaoCadastroVm, decimal?>(x => x.IcmsStValor))
            @Html.LinhaComDuasColunas(new ColunaComEditor<CotacaoCadastroVm, decimal?>(x => x.IpiAliquota), 
            new ColunaComEditor<CotacaoCadastroVm, decimal?>(x => x.IpiValor))
            @Html.LinhaComUmaColuna(new ColunaComEditor<CotacaoCadastroVm, decimal?>(x => x.PisCofinsAliquota))

            @*@Html.LinhaComDuasColunas(new ColunaComEditor<CotacaoCadastroVm, decimal?>(x => x.PisAliquota), 
            new ColunaComEditor<CotacaoCadastroVm, decimal?>(x => x.PisValor))
            @Html.LinhaComDuasColunas(new ColunaComEditor<CotacaoCadastroVm, decimal?>(x => x.CofinsAliquota), 
            new ColunaComEditor<CotacaoCadastroVm, decimal?>(x => x.CofinsValor))*@

        </fieldset>
        <fieldset>
            <legend>Cotação do Fornecedor</legend>
            @*            @Html.LinhaComDuasColunas(new ColunaComEditor<CotacaoCadastroVm, decimal?>(x => x.ValorLiquido), 
            new ColunaComEditor<CotacaoCadastroVm, decimal?>(x => x.ValorComImpostos))*@
            @Html.LinhaComDuasColunas(new ColunaComEditor<CotacaoCadastroVm, decimal?>(x => x.ValorComImpostos) , 
            new ColunaComEditor<CotacaoCadastroVm, decimal?>(x => x.ValorLiquido))
            
            @Html.LinhaComDuasColunas(new ColunaComEditor<CotacaoCadastroVm, decimal>(x => x.QuantidadeDisponivel) , 
            new ColunaComTextBox<CotacaoCadastroVm, string>(x => x.PrazoDeEntrega,"campoDatePicker"))
            

            @{ var comboIncoterm = new ColunaComDropDown<CotacaoCadastroVm, string>(x => x.CodigoIncoterm, 
                ((List<IncotermCadastroVm>) ViewBag.Incoterms)
                .Select(x => new SelectListItem() {Text = x.Descricao, Value = Convert.ToString(x.Codigo), Selected = Model != null && x.Codigo == Model.CodigoIncoterm}),
                "CodigoIncoterm");
            }
            @Html.LinhaComDuasColunas(comboIncoterm, new ColunaComTextBox<CotacaoCadastroVm, string>(x => x.DescricaoIncoterm,"campogrande"))

            @{ var comboCondicaoDePagamento = new ColunaComDropDown<CotacaoCadastroVm, string>(x => x.CodigoCondicaoPagamento, 
                ((List<CondicaoDePagamentoCadastroVm>) ViewBag.CondicoesDePagamento)
                .Select(x => new SelectListItem() {Text = x.Descricao, Value = Convert.ToString(x.Codigo), Selected = Model != null && x.Codigo == Model.CodigoCondicaoPagamento}),
                "CodigoCondicaoPagamento");
            }
            @Html.LinhaComDuasColunas(comboCondicaoDePagamento,new ColunaComEditor<CotacaoCadastroVm, decimal?>(x => x.Mva))
            
            @Html.LinhaComUmaColuna(new ColunaComTextArea<CotacaoCadastroVm, string>(x => x.ObservacoesDoFornecedor))

        </fieldset>
  
        <div class="error">
            @if (ViewData["erro"] != null)
            {
                @ViewData["erro"]
            }
        </div>
        
        @Html.ValidationSummary(true)

        <div class="divBotao">
            <input type="button" id="btnSalvarCotacao" value="Salvar" class="blue" />
        </div>
    }
</div>
@section scripts
{
    @Scripts.Render("~/bundles/jqueryval")
    <script type="text/javascript">
        //Globalize.cultureSelector = 'pt-BR';
        $('input[name=ValorLiquido]').attr('disabled', true);
        $(function () {
            
            function atualizaMensagemDeErro(mensagem) {
                $('.error').html(mensagem);
            }
            function adicionaMensagemDeErro(mensagem) {
                $('.error').append(mensagem);
            }
            
            function validaImposto(campoAliquota, campoValor, descricaoDoImposto) {
                var aliquota = $('#' + campoAliquota).val();
                var valor = $('#' + campoValor).val();
                if ((aliquota && !valor) || (!aliquota && valor)) {
                    adicionaMensagemDeErro("É necessário prencher a alíquota e o valor do " + descricaoDoImposto + ".");
                    return false;
                }
                return true;
            }
            
            function validaImpostos() {
                var valido = validaImposto("IcmsAliquota", "IcmsValor", "ICMS");
                valido = valido && validaImposto("IcmsStAliquota", "IcmsStValor", "ICMS ST");
                valido = valido && validaImposto("IpiAliquota", "IpiValor", "IPI");
                valido = valido && validaImposto("PisAliquota", "PisValor", "Pis");
                valido = valido && validaImposto("CofinsAliquota", "CofinsValor", "Cofins");
                return valido;

            }

            $('#btnSalvarCotacao').click(function () {
                $('.error').empty();
                var form = $('form');
                if (!$(form).validate().form()) {
                    return;
                }

                if (!validaImpostos()) {
                    return;
                }
                
                var formData = $(form).serialize();
                $.post('@Url.Action("Salvar","CotacaoAtualizar" )', formData,
                    function (data) {
                        if (data.Sucesso) {
                            location.href = '@Url.Action("Index","ProcessoCotacaoMaterial")';
                        } else {
                            atualizaMensagemDeErro(data.Mensagem);
                        }
                });

            });
        })
    </script>
}


@using BsBios.Portal.UI.Helpers
@using BsBios.Portal.ViewModel
@model CotacaoMaterialCadastroVm

@{
    ViewBag.TituloDaPagina = "Cotação";
}
<div class="paginaCadastro">
    @using (Html.BeginForm())
    {
        @Html.HiddenFor(model => model.IdProcessoCotacao)
        @Html.HiddenFor(model => model.CodigoFornecedor)
        
        <fieldset>
            <legend>Processo de Cotação</legend>
            @Html.LinhaComDuasColunas(new ColunaComLabel<CotacaoMaterialCadastroVm, string>(x => x.Status),
                                      new ColunaComLabel<CotacaoMaterialCadastroVm, string>(x => x.DataLimiteDeRetorno))
            @Html.LinhaComUmaColuna(new ColunaComLabel<CotacaoMaterialCadastroVm, string>(x => x.Material))
            @Html.LinhaComDuasColunas(new ColunaComLabel<CotacaoMaterialCadastroVm, decimal>(x => x.Quantidade),
                                      new ColunaComLabel<CotacaoMaterialCadastroVm, string>(x => x.UnidadeDeMedida))
            @Html.LinhaComUmaColuna(new ColunaComLabel<CotacaoMaterialCadastroVm, string>(x => x.DescricaoDoProcessoDeCotacao))
            @Html.LinhaComUmaColuna(new ColunaComLabel<CotacaoMaterialCadastroVm, string>(x => x.Requisitos))
        </fieldset>
        
        Html.RenderPartial("_CotacaoImpostos", Model.Impostos);
        
        <fieldset>
            <legend>Cotação do Fornecedor</legend>
            @Html.LinhaComDuasColunas(new ColunaComEditor<CotacaoMaterialCadastroVm, decimal?>(x => x.ValorComImpostos, "campoDesabilitado"),
                                      new ColunaComEditor<CotacaoMaterialCadastroVm, decimal?>(x => x.ValorLiquido))
            
            @Html.LinhaComDuasColunas(new ColunaComEditor<CotacaoMaterialCadastroVm, decimal?>(x => x.QuantidadeDisponivel),
                                        new ColunaComTextBox<CotacaoMaterialCadastroVm, string>(x => x.PrazoDeEntrega, "campoDatePicker"))
            
            @{

                var comboIncoterm = new ColunaComDropDown<CotacaoMaterialCadastroVm, string>(x => x.CodigoIncoterm,
                ((List<IncotermCadastroVm>)ViewBag.Incoterms)
                    .Select(x => new SelectListItem() { Text = x.Descricao, Value = Convert.ToString(x.Codigo), Selected = Model != null && x.Codigo == Model.CodigoIncoterm }),
                "CodigoIncoterm");
                
            }
                    
            @Html.LinhaComDuasColunas(comboIncoterm, new ColunaComTextBox<CotacaoMaterialCadastroVm, string>(x => x.DescricaoIncoterm, "campogrande"))
            
            @{
                var comboCondicaoDePagamento = new ColunaComDropDown<CotacaoMaterialCadastroVm, string>(x => x.CodigoCondicaoPagamento,
                ((List<CondicaoDePagamentoCadastroVm>)ViewBag.CondicoesDePagamento)
                    .Select(x => new SelectListItem() { Text = x.Descricao, Value = Convert.ToString(x.Codigo), Selected = Model != null && x.Codigo == Model.CodigoCondicaoPagamento }),
                "CodigoCondicaoPagamento");
                
            }

            @Html.LinhaComDuasColunas(comboCondicaoDePagamento, new ColunaComEditor<CotacaoMaterialCadastroVm, decimal?>(x => x.Mva))

            @Html.LinhaComUmaColuna(new ColunaComTextArea<CotacaoMaterialCadastroVm, string>(x => x.ObservacoesDoFornecedor))

        </fieldset>
        
  
        <div class="error">
            @if (ViewData["erro"] != null)
            {
                @ViewData["erro"]
            }
        </div>
        
        @Html.ValidationSummary(true)

        <div class="divBotao">
            <input type="button" id="btnSalvarCotacao" value="Salvar" class="blue" />
        </div>
    }
</div>
@section scripts
{
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/scriptsgerais")
    <script type="text/javascript">
        //Globalize.cultureSelector = 'pt-BR';
        $('input[name=ValorLiquido]').attr('disabled', true);
        
        function calculaValorLiquido() {
            var valorComImpostos = Numero.GetFloat($('#ValorComImpostos').val());
            if (valorComImpostos == 0) {
                return;
            }

            var valorIcms = Numero.GetFloat($('#IcmsValor').val());
            var valorIcmsSt = Numero.GetFloat($('#IcmsStValor').val());
            var valorIpi = Numero.GetFloat($('#IpiValor').val());

            var valorLiquido = valorComImpostos - valorIcms - valorIcmsSt - valorIpi;

            $('#ValorLiquido').val(valorLiquido);

        }
        

        $(function() {

            function atualizaMensagemDeErro(mensagem) {
                $('.error').html(mensagem);
            }

            $('#ValorComImpostos').change(function() {
                calculaValorLiquido();
            });
            $('#IcmsValor').change(function () {
                calculaValorLiquido();
            });
            $('#IcmsStValor').change(function () {
                calculaValorLiquido();
            });
            $('#IpiValor').change(function () {
                calculaValorLiquido();
            });

            $('#btnSalvarCotacao').click(function() {
                $('.error').empty();
                var form = $('form');
                if (!$(form).validate().form()) {
                    return;
                }

                var formData = $(form).serialize();
                $.post('@Url.Action("Salvar", "CotacaoDeMaterialAtualizar")', formData,
                    function(data) {
                        if (data.Sucesso) {
                            location.href = '@Url.Action("Index", "ProcessoCotacaoMaterial")';
                        } else {
                            atualizaMensagemDeErro(data.Mensagem);
                        }
                    });

            });
        });
    </script>
}


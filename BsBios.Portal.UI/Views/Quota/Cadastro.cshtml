@using BsBios.Portal.UI.Helpers
@using BsBios.Portal.ViewModel
@model QuotaCadastroVm
@{
    ViewBag.TituloDaPagina = "Quota";
}
@section styles
{
    <link href="@Url.Content("~/Content/kendo/2012.3.1114/kendo.common.min.css")" rel="stylesheet" />
    <link href="@Url.Content("~/Content/kendo/2012.3.1114/kendo.default.min.css")" rel="stylesheet" />
}
<div class="paginaCadastro"> 
    @using (Html.BeginForm())
    {
        <div id="divCadastro">
            <fieldset>
                <legend>Dados Principais</legend>
                @{
                    var data = new ColunaComTextBox<QuotaCadastroVm, string>(x => x.Data, "campoDatePicker maskdata");

                    var comboDeTerminal = new ColunaComDropDown<QuotaCadastroVm, string>(x => x.Terminal,
                    ((List<TerminalCadastroVm>)ViewBag.Terminais)
                    .Select(x => new SelectListItem() { Text = x.Nome, Value = Convert.ToString(x.Codigo), Selected = Model != null && x.Codigo == Model.Terminal }),
                    "Terminal");
                    
                }
                
                @Html.LinhaComDuasColunas(data, comboDeTerminal)
            </fieldset>
            <fieldset id="fieldSetFornecedor">
                <legend>Fornecedor</legend>
                <div class="linha">
                </div>
                <div class="linha">
                    <div>
                        @Html.Hidden("CodigoFornecedor")
                        @Html.LabelFor(x => x.Fornecedor)
                        @Html.TextBoxFor(x => x.Fornecedor,new{@readonly=true,@class="campoextragrande campoDesabilitado"})
                        <input type="button" id="btnSelecionarFornecedor" class="button16 button_visualize" />        
                        @Html.ValidationMessageFor(x=> x.Fornecedor)
                    </div>

                    <div class="coluna">
                        @Html.LabelFor(x => x.Material)
                        @Html.DropDownList("Material",((List<MaterialDeCargaVm>) ViewBag.MateriaisDeCarga)
                            .Select(x => new SelectListItem() {Text = x.Descricao, Value = Convert.ToString(x.Codigo), Selected = false}))                 
                        @Html.ValidationMessageFor(x => x.Material)

                    </div>
                    <div class="coluna">
                        @Html.LabelFor( x => x.FluxoDeCarga)
                        @Html.DropDownList("FluxoDeCarga",((List<FluxoDeCargaVm>) ViewBag.FluxosDeCarga)
                            .Select(x => new SelectListItem() {Text = x.Descricao, Value = Convert.ToString(x.Codigo), Selected = false}))     
                        
                        @Html.ValidationMessageFor(x => x.FluxoDeCarga)            
                    </div>
                    <div class="coluna">
                        @Html.LabelFor(x => x.Peso)
                        @Html.TextBoxFor(x => x.Peso,new{@class="campopequeno maskquantidade"})
                        @Html.ValidationMessageFor(x => x.Peso)
                    </div>
                </div>
                <div class="divBotao">
                    <input type="button" id="btnAdicionarFornecedor" value="Adicionar" class="blue" />
                    <input type="button" id="btnCancelarEdicao" value="Cancelar" class="blue" />
                </div>
            </fieldset>

        </div>
    }
    <fieldset>
        <legend>Fornecedores Adicionados</legend>
        <div @*class="divGrid"*@>
            <div id="gridFornecedoresAdicionados" style="width: 785px" class="divGrid" ></div>    
        </div>
    </fieldset>
    <fieldset>
        <legend>Operações</legend>
        <div class="divBotao">
            <input type="button" id="btnSalvar" value="Salvar" class="blue"/>
            <input type="button" id="btnCopiar" value="Copiar" class="blue"/>
            <input type="button" id="btnNovo" value="Novo" class="blue"/>
        </div>
    </fieldset>
    @*<div id="divSelecionarFornecedor" class="janelaModal"></div>*@
</div>
@section scripts
{
    @Scripts.Render("~/bundles/jqueryval")
    <script type="text/javascript" src="@Url.Content("~/Scripts/kendo/2012.3.1114/kendo.web.min.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/kendo/2012.3.1114/kendo.grid.min.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/jquery.maskedinput.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/jquery.meio.mask.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/Shared/SelecionarFornecedor.js")"></script>
    <script type="text/javascript">
        var fornecedoresAdicionados = [];
        var quotasRemovidas = [];
        var quantidadeDeFornecedoresIniciais = 0;
        var indiceEdicao = -1;
        $(function() {
            aplicaMascaraData();
            aplicaMascaraQuantidade();
            var selecionarFornecedor = new SelecionarFornecedor();
            selecionarFornecedor.configurar("#CodigoFornecedor","#Fornecedor","divSelecionarFornecedor", "#btnSelecionarFornecedor");

            $('#btnCancelarEdicao').hide();

            function existeQuota(quota) {
                var quotaEncontrada = false;
                $.each(fornecedoresAdicionados, function(indice, fornecedor) {
                    if (quotaEncontrada) {
                        return;
                    }
                    if (indice === indiceEdicao) {
                        return;
                    }
                    if (fornecedor.CodigoFornecedor === quota.CodigoFornecedor
                        && fornecedor.CodigoFluxoCarga === quota.CodigoFluxoCarga
                        && fornecedor.CodigoMaterial === quota.CodigoMaterial) {
                        quotaEncontrada = true;
                    }
                });
                return quotaEncontrada;
            }

            function atualizaGrid() {
                var grid = $("#gridFornecedoresAdicionados").data("kendoGrid");
                grid.dataSource.read();
            }

            function encerrarEdicao() {
                indiceEdicao = -1;
                $('#btnAdicionarFornecedor').val('Adicionar');
                $('#btnCancelarEdicao').hide();

            }

            function atualizarCotacoes() {
                var dataPesquisa = $('#Data').val();
                var codigoDoTerminal = $('#Terminal').val();
                if (!dataPesquisa || !codigoDoTerminal) {
                    return;
                }

                $.ajax({
                    url: '@Url.Action("ListarFornecedores", "Quota")',
                    type: 'GET',
                    cache: false,
                    data: {
                        DataDaQuota: dataPesquisa,
                        CodigoDoTerminal: codigoDoTerminal
                    },
                    dataType: 'json',
                    success: function(data) {
                        if (!data.Sucesso) {
                            Mensagem.ExibirMensagemDeErro(data.Mensagem);
                            return;
                        }

                        if (data.Registros.length === 0) {
                            //caso seja uma data que não tenha registros tem que sair do método e manter os registros do grid,
                            //caso existam. Com isso os registros do copiar não serão excluidos quando os campos de terminal e data
                            //forem preenchidos.
                            return;
                        }

                        fornecedoresAdicionados = data.Registros;

                        desabilitarCamposPrincipais();

                        quantidadeDeFornecedoresIniciais = fornecedoresAdicionados.length;

                        /* preencher os campos principais e carregar o grid via ajax*/
                        atualizaGrid();

                    },
                    error: function(jqXHR, textStatus, errorThrown) {
                        Mensagem.ExibirMensagemDeErro('Ocorreu um erro ao consultar as quotas. Detalhe: ' + textStatus + errorThrown);
                    }
                });

            }

            $('#btnCancelarEdicao').click(function() {
                encerrarEdicao();
            });

            $('#btnAdicionarFornecedor').click(function() {
                var form = $('form');
                if (!$(form).validate().form()) {
                    return;
                }

                var fornecedor = {
                    CodigoFornecedor: $('#CodigoFornecedor').val(),
                    NomeFornecedor: $('#Fornecedor').val(),
                    CodigoMaterial: $('#Material :selected').val(),
                    DescricaoMaterial: $('#Material :selected').text(),
                    CodigoFluxoCarga: $('#FluxoDeCarga :selected').val(),
                    DescricaoFluxoCarga: $('#FluxoDeCarga :selected').text(),
                    Peso: $('#Peso').val(),
                    PesoAgendado: 0
                };

                if (existeQuota(fornecedor)) {
                    Mensagem.ExibirMensagemDeErro("Já existe quota cadastrada para o fornecedor " + fornecedor.NomeFornecedor +
                        " e o material " + fornecedor.DescricaoMaterial + ". Edite a quota existente.");
                    return;
                }

                if (indiceEdicao === -1) {
                    fornecedoresAdicionados.push(fornecedor);
                } else {
                    fornecedoresAdicionados[indiceEdicao] = fornecedor;
                    encerrarEdicao();
                }

                atualizaGrid();
            });

            $('#gridFornecedoresAdicionados').kendoGrid({
                dataSource: {
                    schema: {
                        data: function() { return fornecedoresAdicionados; },
                        model: {
                            id: 'Codigo',
                            fields: {
                                IdQuota: {type: "number"},
                                CodigoFornecedor: { type: "string" },
                                NomeFornecedor: { type: "string" },
                                CodigoMaterial: { type: "number" },
                                DescricaoMaterial: { type: "string" },
                                CodigoFluxoCarga: { type: "number" },
                                DescricaoFluxoCarga: { type: "string" },
                                Peso: { type: "number" },
                                Agendado: { type: "number" }
                            }
                        }
                    }
                },
                sortable: false,
                selectable: 'row',
                columns:
                [
                    {
                        title: ' ',
                        width: 40,
                        sortable: false,
                        template: '<input type="button" class="button_edit" data-codigofornecedor="${CodigoFornecedor}"></input>'
                    },
                    {
                        title: ' ',
                        width: 40,
                        sortable: false,
                        template: '<input type="button" class="button16 button_remove" data-codigofornecedor="${CodigoFornecedor}"></input>'
                    },
                    {
                        field: "CodigoFornecedor",
                        width: 100,
                        title: "Código"
                    },
                    {
                        field: "NomeFornecedor",
                        width: 320,
                        title: "Fornecedor"
                    },
                    {
                        field: "DescricaoMaterial",
                        width: 70,
                        title: "Material"
                    },
                    {
                        field: "DescricaoFluxoCarga",
                        width: 130,
                        title: "Fluxo de Carga"
                    },
                    {
                        width: 80,
                        field: "Peso",
                        format: "{0:n3}"
                    },
                    {
                        width: 80,
                        title: 'Agendado',
                        field: "PesoAgendado",
                        format: "{0:n3}"
                    }

                ]
            });

            $('#gridFornecedoresAdicionados').find('.button_remove').die('click');
            $('#gridFornecedoresAdicionados').find('.button_remove').live('click', function () {
                var indice = $(this).parents('tr:first')[0].rowIndex;
                var idQuota = fornecedoresAdicionados[indice].IdQuota;
                if (idQuota) {
                    quotasRemovidas.push(idQuota);    
                }
                fornecedoresAdicionados.splice(indice, 1);
                atualizaGrid();
            });

            $('#gridFornecedoresAdicionados').find('.button_edit').die('click');
            $('#gridFornecedoresAdicionados').find('.button_edit').live('click', function() {
                indiceEdicao = $(this).parents('tr:first')[0].rowIndex;
                var quota = fornecedoresAdicionados[indiceEdicao];

                $('#CodigoFornecedor').val(quota.CodigoFornecedor);
                $('#Fornecedor').val(quota.NomeFornecedor);
                $('#Material').val(quota.CodigoMaterial);
                $('#Material').change();
                $('#Peso').val(Globalize.format(quota.Peso));

                $('#btnAdicionarFornecedor').val('Atualizar');
                $('#btnCancelarEdicao').show();
            });

            $('#Data, #Terminal').change(function() {

                atualizarCotacoes();

            });

            $('#btnSalvar').click(function() {
                if (quantidadeDeFornecedoresIniciais == 0 && fornecedoresAdicionados.length == 0) {
                    Mensagem.ExibirMensagemDeErro('Deve ser adicionado pelo menos um Fornecedor antes de salvar.');
                    return;
                }

                var quotasParaSalvar = new Array();
                $.each(fornecedoresAdicionados, function(indice, quota) {
                    quotasParaSalvar.push({
                        CodigoMaterial: quota.CodigoMaterial,
                        CodigoFornecedor: quota.CodigoFornecedor,
                        Peso: quota.Peso,
                        FluxoDeCarga: quota.CodigoFluxoCarga
                    });
                });


                var dataEmArray = $('#Data').val().split('/');

                var dataDaQuota = new Date(dataEmArray[2], dataEmArray[1] - 1, dataEmArray[0]);

                var quotasSalvarVm = {
                    Data: dataDaQuota,
                    CodigoDoTerminal: $('#Terminal').val(),
                    Quotas: quotasParaSalvar,
                    QuotasParaRemover: quotasRemovidas
                };

                $.ajax({
                    url: '@Url.Action("Salvar", "QuotaSalvar")',
                    type: 'POST',
                    cache: false,
                    data: JSON.stringify(quotasSalvarVm),
                    contentType: "application/json; charset=utf-8",
                    dataType: 'json',
                    success: function (data) {
                        if (data.Sucesso) {
                            Mensagem.ExibirMensagemDeSucesso("As quotas foram salvas com sucesso.");
                            atualizarCotacoes();
                            return;
                        } else {
                            Mensagem.ExibirMensagemDeErro(data.Mensagem);
                        }

                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        Mensagem.ExibirMensagemDeErro('Ocorreu um erro ao consultar as quotas. Detalhe: ' + textStatus + errorThrown);
                    }
                });
            });

            function habilitarCamposPrincipais() {
                $('#Data,#Terminal')
                    .attr('readonly', false)
                    .removeClass('campoDesabilitado')
                    .removeAttr('disabled')
                    .val('');

            }

            function desabilitarCamposPrincipais() {

                $('#Data,#Terminal')
                    .attr('readonly', true)
                    .addClass('campoDesabilitado')
                    .attr('disabled', 'disabled');

            }

            $('#btnCopiar').click(function () {
                habilitarCamposPrincipais();
            });


            $('#btnNovo').click(function () {
                habilitarCamposPrincipais();
                fornecedoresAdicionados = [];
                atualizaGrid();
                $('form').find('input[type!=button]').val();
            });

        });

    </script>


}


